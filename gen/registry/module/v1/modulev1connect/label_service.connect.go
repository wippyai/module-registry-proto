// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/module/v1/label_service.proto

package modulev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/module/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LabelServiceName is the fully-qualified name of the LabelService service.
	LabelServiceName = "registry.module.v1.LabelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LabelServiceCreateLabelProcedure is the fully-qualified name of the LabelService's CreateLabel
	// RPC.
	LabelServiceCreateLabelProcedure = "/registry.module.v1.LabelService/CreateLabel"
)

// LabelServiceClient is a client for the registry.module.v1.LabelService service.
type LabelServiceClient interface {
	// Create Label on a Module.
	CreateLabel(context.Context, *connect.Request[v1.CreateLabelRequest]) (*connect.Response[v1.CreateLabelResponse], error)
}

// NewLabelServiceClient constructs a client for the registry.module.v1.LabelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLabelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LabelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	labelServiceMethods := v1.File_registry_module_v1_label_service_proto.Services().ByName("LabelService").Methods()
	return &labelServiceClient{
		createLabel: connect.NewClient[v1.CreateLabelRequest, v1.CreateLabelResponse](
			httpClient,
			baseURL+LabelServiceCreateLabelProcedure,
			connect.WithSchema(labelServiceMethods.ByName("CreateLabel")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// labelServiceClient implements LabelServiceClient.
type labelServiceClient struct {
	createLabel *connect.Client[v1.CreateLabelRequest, v1.CreateLabelResponse]
}

// CreateLabel calls registry.module.v1.LabelService.CreateLabel.
func (c *labelServiceClient) CreateLabel(ctx context.Context, req *connect.Request[v1.CreateLabelRequest]) (*connect.Response[v1.CreateLabelResponse], error) {
	return c.createLabel.CallUnary(ctx, req)
}

// LabelServiceHandler is an implementation of the registry.module.v1.LabelService service.
type LabelServiceHandler interface {
	// Create Label on a Module.
	CreateLabel(context.Context, *connect.Request[v1.CreateLabelRequest]) (*connect.Response[v1.CreateLabelResponse], error)
}

// NewLabelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLabelServiceHandler(svc LabelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	labelServiceMethods := v1.File_registry_module_v1_label_service_proto.Services().ByName("LabelService").Methods()
	labelServiceCreateLabelHandler := connect.NewUnaryHandler(
		LabelServiceCreateLabelProcedure,
		svc.CreateLabel,
		connect.WithSchema(labelServiceMethods.ByName("CreateLabel")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.module.v1.LabelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LabelServiceCreateLabelProcedure:
			labelServiceCreateLabelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLabelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLabelServiceHandler struct{}

func (UnimplementedLabelServiceHandler) CreateLabel(context.Context, *connect.Request[v1.CreateLabelRequest]) (*connect.Response[v1.CreateLabelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.LabelService.CreateLabel is not implemented"))
}
