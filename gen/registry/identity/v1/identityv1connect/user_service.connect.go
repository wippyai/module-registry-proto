// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/identity/v1/user_service.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "registry.identity.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/registry.identity.v1.UserService/CreateUser"
	// UserServiceSelfProcedure is the fully-qualified name of the UserService's Self RPC.
	UserServiceSelfProcedure = "/registry.identity.v1.UserService/Self"
)

// UserServiceClient is a client for the registry.identity.v1.UserService service.
type UserServiceClient interface {
	// Create new user.
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// Get the current authenticated user.
	Self(context.Context, *connect.Request[v1.SelfRequest]) (*connect.Response[v1.SelfResponse], error)
}

// NewUserServiceClient constructs a client for the registry.identity.v1.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_registry_identity_v1_user_service_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		self: connect.NewClient[v1.SelfRequest, v1.SelfResponse](
			httpClient,
			baseURL+UserServiceSelfProcedure,
			connect.WithSchema(userServiceMethods.ByName("Self")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	self       *connect.Client[v1.SelfRequest, v1.SelfResponse]
}

// CreateUser calls registry.identity.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// Self calls registry.identity.v1.UserService.Self.
func (c *userServiceClient) Self(ctx context.Context, req *connect.Request[v1.SelfRequest]) (*connect.Response[v1.SelfResponse], error) {
	return c.self.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the registry.identity.v1.UserService service.
type UserServiceHandler interface {
	// Create new user.
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// Get the current authenticated user.
	Self(context.Context, *connect.Request[v1.SelfRequest]) (*connect.Response[v1.SelfResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_registry_identity_v1_user_service_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSelfHandler := connect.NewUnaryHandler(
		UserServiceSelfProcedure,
		svc.Self,
		connect.WithSchema(userServiceMethods.ByName("Self")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.identity.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceSelfProcedure:
			userServiceSelfHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.identity.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) Self(context.Context, *connect.Request[v1.SelfRequest]) (*connect.Response[v1.SelfResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.identity.v1.UserService.Self is not implemented"))
}
