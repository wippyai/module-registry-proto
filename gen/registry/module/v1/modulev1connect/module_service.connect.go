// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/module/v1/module_service.proto

package modulev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/module/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModuleServiceName is the fully-qualified name of the ModuleService service.
	ModuleServiceName = "registry.module.v1.ModuleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModuleServiceCreateModuleProcedure is the fully-qualified name of the ModuleService's
	// CreateModule RPC.
	ModuleServiceCreateModuleProcedure = "/registry.module.v1.ModuleService/CreateModule"
	// ModuleServiceListModulesProcedure is the fully-qualified name of the ModuleService's ListModules
	// RPC.
	ModuleServiceListModulesProcedure = "/registry.module.v1.ModuleService/ListModules"
	// ModuleServiceListOrganizationModulesProcedure is the fully-qualified name of the ModuleService's
	// ListOrganizationModules RPC.
	ModuleServiceListOrganizationModulesProcedure = "/registry.module.v1.ModuleService/ListOrganizationModules"
)

// ModuleServiceClient is a client for the registry.module.v1.ModuleService service.
type ModuleServiceClient interface {
	// Create new Module.
	CreateModule(context.Context, *connect.Request[v1.CreateModuleRequest]) (*connect.Response[v1.CreateModuleResponse], error)
	// List Modules by their IDs.
	ListModules(context.Context, *connect.Request[v1.ListModulesRequest]) (*connect.Response[v1.ListModulesResponse], error)
	// List all Modules for specified Organizations.
	ListOrganizationModules(context.Context, *connect.Request[v1.ListOrganizationModulesRequest]) (*connect.Response[v1.ListOrganizationModulesResponse], error)
}

// NewModuleServiceClient constructs a client for the registry.module.v1.ModuleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModuleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModuleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	moduleServiceMethods := v1.File_registry_module_v1_module_service_proto.Services().ByName("ModuleService").Methods()
	return &moduleServiceClient{
		createModule: connect.NewClient[v1.CreateModuleRequest, v1.CreateModuleResponse](
			httpClient,
			baseURL+ModuleServiceCreateModuleProcedure,
			connect.WithSchema(moduleServiceMethods.ByName("CreateModule")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listModules: connect.NewClient[v1.ListModulesRequest, v1.ListModulesResponse](
			httpClient,
			baseURL+ModuleServiceListModulesProcedure,
			connect.WithSchema(moduleServiceMethods.ByName("ListModules")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listOrganizationModules: connect.NewClient[v1.ListOrganizationModulesRequest, v1.ListOrganizationModulesResponse](
			httpClient,
			baseURL+ModuleServiceListOrganizationModulesProcedure,
			connect.WithSchema(moduleServiceMethods.ByName("ListOrganizationModules")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// moduleServiceClient implements ModuleServiceClient.
type moduleServiceClient struct {
	createModule            *connect.Client[v1.CreateModuleRequest, v1.CreateModuleResponse]
	listModules             *connect.Client[v1.ListModulesRequest, v1.ListModulesResponse]
	listOrganizationModules *connect.Client[v1.ListOrganizationModulesRequest, v1.ListOrganizationModulesResponse]
}

// CreateModule calls registry.module.v1.ModuleService.CreateModule.
func (c *moduleServiceClient) CreateModule(ctx context.Context, req *connect.Request[v1.CreateModuleRequest]) (*connect.Response[v1.CreateModuleResponse], error) {
	return c.createModule.CallUnary(ctx, req)
}

// ListModules calls registry.module.v1.ModuleService.ListModules.
func (c *moduleServiceClient) ListModules(ctx context.Context, req *connect.Request[v1.ListModulesRequest]) (*connect.Response[v1.ListModulesResponse], error) {
	return c.listModules.CallUnary(ctx, req)
}

// ListOrganizationModules calls registry.module.v1.ModuleService.ListOrganizationModules.
func (c *moduleServiceClient) ListOrganizationModules(ctx context.Context, req *connect.Request[v1.ListOrganizationModulesRequest]) (*connect.Response[v1.ListOrganizationModulesResponse], error) {
	return c.listOrganizationModules.CallUnary(ctx, req)
}

// ModuleServiceHandler is an implementation of the registry.module.v1.ModuleService service.
type ModuleServiceHandler interface {
	// Create new Module.
	CreateModule(context.Context, *connect.Request[v1.CreateModuleRequest]) (*connect.Response[v1.CreateModuleResponse], error)
	// List Modules by their IDs.
	ListModules(context.Context, *connect.Request[v1.ListModulesRequest]) (*connect.Response[v1.ListModulesResponse], error)
	// List all Modules for specified Organizations.
	ListOrganizationModules(context.Context, *connect.Request[v1.ListOrganizationModulesRequest]) (*connect.Response[v1.ListOrganizationModulesResponse], error)
}

// NewModuleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModuleServiceHandler(svc ModuleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moduleServiceMethods := v1.File_registry_module_v1_module_service_proto.Services().ByName("ModuleService").Methods()
	moduleServiceCreateModuleHandler := connect.NewUnaryHandler(
		ModuleServiceCreateModuleProcedure,
		svc.CreateModule,
		connect.WithSchema(moduleServiceMethods.ByName("CreateModule")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	moduleServiceListModulesHandler := connect.NewUnaryHandler(
		ModuleServiceListModulesProcedure,
		svc.ListModules,
		connect.WithSchema(moduleServiceMethods.ByName("ListModules")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	moduleServiceListOrganizationModulesHandler := connect.NewUnaryHandler(
		ModuleServiceListOrganizationModulesProcedure,
		svc.ListOrganizationModules,
		connect.WithSchema(moduleServiceMethods.ByName("ListOrganizationModules")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.module.v1.ModuleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModuleServiceCreateModuleProcedure:
			moduleServiceCreateModuleHandler.ServeHTTP(w, r)
		case ModuleServiceListModulesProcedure:
			moduleServiceListModulesHandler.ServeHTTP(w, r)
		case ModuleServiceListOrganizationModulesProcedure:
			moduleServiceListOrganizationModulesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModuleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModuleServiceHandler struct{}

func (UnimplementedModuleServiceHandler) CreateModule(context.Context, *connect.Request[v1.CreateModuleRequest]) (*connect.Response[v1.CreateModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.ModuleService.CreateModule is not implemented"))
}

func (UnimplementedModuleServiceHandler) ListModules(context.Context, *connect.Request[v1.ListModulesRequest]) (*connect.Response[v1.ListModulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.ModuleService.ListModules is not implemented"))
}

func (UnimplementedModuleServiceHandler) ListOrganizationModules(context.Context, *connect.Request[v1.ListOrganizationModulesRequest]) (*connect.Response[v1.ListOrganizationModulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.ModuleService.ListOrganizationModules is not implemented"))
}
