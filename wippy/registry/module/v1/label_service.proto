syntax = "proto3";

package wippy.registry.module.v1;

import "buf/validate/validate.proto";
import "wippy/registry/module/v1/label.proto";

option go_package = "github.com/wippyai/module-registry-proto-go/registry/module/v1;modulev1";

// Operate on Labels.
service LabelService {
  // Create Label on a Module.
  rpc CreateLabel(CreateLabelRequest) returns (CreateLabelResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // List Labels for multiple Modules.
  rpc ListModuleLabels(ListModuleLabelsRequest) returns (ListModuleLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message CreateLabelRequest {
  string module_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];

  string commit_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uuid = true
  ];

  string name = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 60,
    (buf.validate.field).string.pattern = "^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
  ];
}

message CreateLabelResponse {
  Label label = 1;
}

message ListModuleLabelsRequest {
  // Filter by module IDs
  repeated string module_ids = 1 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.max_items = 256,
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.items.string.uuid = true
  ];
}

message ListModuleLabelsResponse {
  // The labels matching the request criteria
  repeated Label labels = 1;
}
