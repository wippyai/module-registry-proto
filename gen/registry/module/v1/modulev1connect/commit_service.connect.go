// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/module/v1/commit_service.proto

package modulev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/module/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommitServiceName is the fully-qualified name of the CommitService service.
	CommitServiceName = "registry.module.v1.CommitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommitServiceListModuleCommitsProcedure is the fully-qualified name of the CommitService's
	// ListModuleCommits RPC.
	CommitServiceListModuleCommitsProcedure = "/registry.module.v1.CommitService/ListModuleCommits"
)

// CommitServiceClient is a client for the registry.module.v1.CommitService service.
type CommitServiceClient interface {
	// List commits for specific modules.
	ListModuleCommits(context.Context, *connect.Request[v1.ListModuleCommitsRequest]) (*connect.Response[v1.ListModuleCommitsResponse], error)
}

// NewCommitServiceClient constructs a client for the registry.module.v1.CommitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	commitServiceMethods := v1.File_registry_module_v1_commit_service_proto.Services().ByName("CommitService").Methods()
	return &commitServiceClient{
		listModuleCommits: connect.NewClient[v1.ListModuleCommitsRequest, v1.ListModuleCommitsResponse](
			httpClient,
			baseURL+CommitServiceListModuleCommitsProcedure,
			connect.WithSchema(commitServiceMethods.ByName("ListModuleCommits")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// commitServiceClient implements CommitServiceClient.
type commitServiceClient struct {
	listModuleCommits *connect.Client[v1.ListModuleCommitsRequest, v1.ListModuleCommitsResponse]
}

// ListModuleCommits calls registry.module.v1.CommitService.ListModuleCommits.
func (c *commitServiceClient) ListModuleCommits(ctx context.Context, req *connect.Request[v1.ListModuleCommitsRequest]) (*connect.Response[v1.ListModuleCommitsResponse], error) {
	return c.listModuleCommits.CallUnary(ctx, req)
}

// CommitServiceHandler is an implementation of the registry.module.v1.CommitService service.
type CommitServiceHandler interface {
	// List commits for specific modules.
	ListModuleCommits(context.Context, *connect.Request[v1.ListModuleCommitsRequest]) (*connect.Response[v1.ListModuleCommitsResponse], error)
}

// NewCommitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommitServiceHandler(svc CommitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commitServiceMethods := v1.File_registry_module_v1_commit_service_proto.Services().ByName("CommitService").Methods()
	commitServiceListModuleCommitsHandler := connect.NewUnaryHandler(
		CommitServiceListModuleCommitsProcedure,
		svc.ListModuleCommits,
		connect.WithSchema(commitServiceMethods.ByName("ListModuleCommits")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.module.v1.CommitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommitServiceListModuleCommitsProcedure:
			commitServiceListModuleCommitsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommitServiceHandler struct{}

func (UnimplementedCommitServiceHandler) ListModuleCommits(context.Context, *connect.Request[v1.ListModuleCommitsRequest]) (*connect.Response[v1.ListModuleCommitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.CommitService.ListModuleCommits is not implemented"))
}
