// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/identity/v1/organization_membership_service.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationMembershipServiceName is the fully-qualified name of the
	// OrganizationMembershipService service.
	OrganizationMembershipServiceName = "registry.identity.v1.OrganizationMembershipService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationMembershipServiceAddOrganizationMemberProcedure is the fully-qualified name of the
	// OrganizationMembershipService's AddOrganizationMember RPC.
	OrganizationMembershipServiceAddOrganizationMemberProcedure = "/registry.identity.v1.OrganizationMembershipService/AddOrganizationMember"
)

// OrganizationMembershipServiceClient is a client for the
// registry.identity.v1.OrganizationMembershipService service.
type OrganizationMembershipServiceClient interface {
	// Add a member to an organization.
	AddOrganizationMember(context.Context, *connect.Request[v1.AddOrganizationMemberRequest]) (*connect.Response[v1.AddOrganizationMemberResponse], error)
}

// NewOrganizationMembershipServiceClient constructs a client for the
// registry.identity.v1.OrganizationMembershipService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationMembershipServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationMembershipServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationMembershipServiceMethods := v1.File_registry_identity_v1_organization_membership_service_proto.Services().ByName("OrganizationMembershipService").Methods()
	return &organizationMembershipServiceClient{
		addOrganizationMember: connect.NewClient[v1.AddOrganizationMemberRequest, v1.AddOrganizationMemberResponse](
			httpClient,
			baseURL+OrganizationMembershipServiceAddOrganizationMemberProcedure,
			connect.WithSchema(organizationMembershipServiceMethods.ByName("AddOrganizationMember")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationMembershipServiceClient implements OrganizationMembershipServiceClient.
type organizationMembershipServiceClient struct {
	addOrganizationMember *connect.Client[v1.AddOrganizationMemberRequest, v1.AddOrganizationMemberResponse]
}

// AddOrganizationMember calls
// registry.identity.v1.OrganizationMembershipService.AddOrganizationMember.
func (c *organizationMembershipServiceClient) AddOrganizationMember(ctx context.Context, req *connect.Request[v1.AddOrganizationMemberRequest]) (*connect.Response[v1.AddOrganizationMemberResponse], error) {
	return c.addOrganizationMember.CallUnary(ctx, req)
}

// OrganizationMembershipServiceHandler is an implementation of the
// registry.identity.v1.OrganizationMembershipService service.
type OrganizationMembershipServiceHandler interface {
	// Add a member to an organization.
	AddOrganizationMember(context.Context, *connect.Request[v1.AddOrganizationMemberRequest]) (*connect.Response[v1.AddOrganizationMemberResponse], error)
}

// NewOrganizationMembershipServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationMembershipServiceHandler(svc OrganizationMembershipServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationMembershipServiceMethods := v1.File_registry_identity_v1_organization_membership_service_proto.Services().ByName("OrganizationMembershipService").Methods()
	organizationMembershipServiceAddOrganizationMemberHandler := connect.NewUnaryHandler(
		OrganizationMembershipServiceAddOrganizationMemberProcedure,
		svc.AddOrganizationMember,
		connect.WithSchema(organizationMembershipServiceMethods.ByName("AddOrganizationMember")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.identity.v1.OrganizationMembershipService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationMembershipServiceAddOrganizationMemberProcedure:
			organizationMembershipServiceAddOrganizationMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationMembershipServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationMembershipServiceHandler struct{}

func (UnimplementedOrganizationMembershipServiceHandler) AddOrganizationMember(context.Context, *connect.Request[v1.AddOrganizationMemberRequest]) (*connect.Response[v1.AddOrganizationMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.identity.v1.OrganizationMembershipService.AddOrganizationMember is not implemented"))
}
