// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/identity/v1/github_auth_service.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/identity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GithubAuthServiceName is the fully-qualified name of the GithubAuthService service.
	GithubAuthServiceName = "registry.identity.v1.GithubAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GithubAuthServiceGithubOauthLoginProcedure is the fully-qualified name of the GithubAuthService's
	// GithubOauthLogin RPC.
	GithubAuthServiceGithubOauthLoginProcedure = "/registry.identity.v1.GithubAuthService/GithubOauthLogin"
	// GithubAuthServiceGithubOauthCallbackProcedure is the fully-qualified name of the
	// GithubAuthService's GithubOauthCallback RPC.
	GithubAuthServiceGithubOauthCallbackProcedure = "/registry.identity.v1.GithubAuthService/GithubOauthCallback"
)

// GithubAuthServiceClient is a client for the registry.identity.v1.GithubAuthService service.
type GithubAuthServiceClient interface {
	// Start GitHub OAuth flow.
	GithubOauthLogin(context.Context, *connect.Request[v1.GithubOauthLoginRequest]) (*connect.Response[v1.GithubOauthLoginResponse], error)
	// Handle GitHub OAuth callback.
	GithubOauthCallback(context.Context, *connect.Request[v1.GithubOauthCallbackRequest]) (*connect.Response[v1.GithubOauthCallbackResponse], error)
}

// NewGithubAuthServiceClient constructs a client for the registry.identity.v1.GithubAuthService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGithubAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GithubAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	githubAuthServiceMethods := v1.File_registry_identity_v1_github_auth_service_proto.Services().ByName("GithubAuthService").Methods()
	return &githubAuthServiceClient{
		githubOauthLogin: connect.NewClient[v1.GithubOauthLoginRequest, v1.GithubOauthLoginResponse](
			httpClient,
			baseURL+GithubAuthServiceGithubOauthLoginProcedure,
			connect.WithSchema(githubAuthServiceMethods.ByName("GithubOauthLogin")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		githubOauthCallback: connect.NewClient[v1.GithubOauthCallbackRequest, v1.GithubOauthCallbackResponse](
			httpClient,
			baseURL+GithubAuthServiceGithubOauthCallbackProcedure,
			connect.WithSchema(githubAuthServiceMethods.ByName("GithubOauthCallback")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// githubAuthServiceClient implements GithubAuthServiceClient.
type githubAuthServiceClient struct {
	githubOauthLogin    *connect.Client[v1.GithubOauthLoginRequest, v1.GithubOauthLoginResponse]
	githubOauthCallback *connect.Client[v1.GithubOauthCallbackRequest, v1.GithubOauthCallbackResponse]
}

// GithubOauthLogin calls registry.identity.v1.GithubAuthService.GithubOauthLogin.
func (c *githubAuthServiceClient) GithubOauthLogin(ctx context.Context, req *connect.Request[v1.GithubOauthLoginRequest]) (*connect.Response[v1.GithubOauthLoginResponse], error) {
	return c.githubOauthLogin.CallUnary(ctx, req)
}

// GithubOauthCallback calls registry.identity.v1.GithubAuthService.GithubOauthCallback.
func (c *githubAuthServiceClient) GithubOauthCallback(ctx context.Context, req *connect.Request[v1.GithubOauthCallbackRequest]) (*connect.Response[v1.GithubOauthCallbackResponse], error) {
	return c.githubOauthCallback.CallUnary(ctx, req)
}

// GithubAuthServiceHandler is an implementation of the registry.identity.v1.GithubAuthService
// service.
type GithubAuthServiceHandler interface {
	// Start GitHub OAuth flow.
	GithubOauthLogin(context.Context, *connect.Request[v1.GithubOauthLoginRequest]) (*connect.Response[v1.GithubOauthLoginResponse], error)
	// Handle GitHub OAuth callback.
	GithubOauthCallback(context.Context, *connect.Request[v1.GithubOauthCallbackRequest]) (*connect.Response[v1.GithubOauthCallbackResponse], error)
}

// NewGithubAuthServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGithubAuthServiceHandler(svc GithubAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	githubAuthServiceMethods := v1.File_registry_identity_v1_github_auth_service_proto.Services().ByName("GithubAuthService").Methods()
	githubAuthServiceGithubOauthLoginHandler := connect.NewUnaryHandler(
		GithubAuthServiceGithubOauthLoginProcedure,
		svc.GithubOauthLogin,
		connect.WithSchema(githubAuthServiceMethods.ByName("GithubOauthLogin")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	githubAuthServiceGithubOauthCallbackHandler := connect.NewUnaryHandler(
		GithubAuthServiceGithubOauthCallbackProcedure,
		svc.GithubOauthCallback,
		connect.WithSchema(githubAuthServiceMethods.ByName("GithubOauthCallback")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.identity.v1.GithubAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GithubAuthServiceGithubOauthLoginProcedure:
			githubAuthServiceGithubOauthLoginHandler.ServeHTTP(w, r)
		case GithubAuthServiceGithubOauthCallbackProcedure:
			githubAuthServiceGithubOauthCallbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGithubAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGithubAuthServiceHandler struct{}

func (UnimplementedGithubAuthServiceHandler) GithubOauthLogin(context.Context, *connect.Request[v1.GithubOauthLoginRequest]) (*connect.Response[v1.GithubOauthLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.identity.v1.GithubAuthService.GithubOauthLogin is not implemented"))
}

func (UnimplementedGithubAuthServiceHandler) GithubOauthCallback(context.Context, *connect.Request[v1.GithubOauthCallbackRequest]) (*connect.Response[v1.GithubOauthCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.identity.v1.GithubAuthService.GithubOauthCallback is not implemented"))
}
