// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/module/v1/upload_service.proto

package modulev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wippyai/module-registry-proto/gen/registry/module/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UploadServiceName is the fully-qualified name of the UploadService service.
	UploadServiceName = "registry.module.v1.UploadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UploadServiceUploadProcedure is the fully-qualified name of the UploadService's Upload RPC.
	UploadServiceUploadProcedure = "/registry.module.v1.UploadService/Upload"
	// UploadServiceUploadArchiveProcedure is the fully-qualified name of the UploadService's
	// UploadArchive RPC.
	UploadServiceUploadArchiveProcedure = "/registry.module.v1.UploadService/UploadArchive"
)

// UploadServiceClient is a client for the registry.module.v1.UploadService service.
type UploadServiceClient interface {
	// Upload contents for the given Module.
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
	// Upload archive contents for the given Module.
	// This allows uploading compressed archive files that will be extracted server-side.
	UploadArchive(context.Context, *connect.Request[v1.UploadArchiveRequest]) (*connect.Response[v1.UploadArchiveResponse], error)
}

// NewUploadServiceClient constructs a client for the registry.module.v1.UploadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUploadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UploadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	uploadServiceMethods := v1.File_registry_module_v1_upload_service_proto.Services().ByName("UploadService").Methods()
	return &uploadServiceClient{
		upload: connect.NewClient[v1.UploadRequest, v1.UploadResponse](
			httpClient,
			baseURL+UploadServiceUploadProcedure,
			connect.WithSchema(uploadServiceMethods.ByName("Upload")),
			connect.WithClientOptions(opts...),
		),
		uploadArchive: connect.NewClient[v1.UploadArchiveRequest, v1.UploadArchiveResponse](
			httpClient,
			baseURL+UploadServiceUploadArchiveProcedure,
			connect.WithSchema(uploadServiceMethods.ByName("UploadArchive")),
			connect.WithClientOptions(opts...),
		),
	}
}

// uploadServiceClient implements UploadServiceClient.
type uploadServiceClient struct {
	upload        *connect.Client[v1.UploadRequest, v1.UploadResponse]
	uploadArchive *connect.Client[v1.UploadArchiveRequest, v1.UploadArchiveResponse]
}

// Upload calls registry.module.v1.UploadService.Upload.
func (c *uploadServiceClient) Upload(ctx context.Context, req *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// UploadArchive calls registry.module.v1.UploadService.UploadArchive.
func (c *uploadServiceClient) UploadArchive(ctx context.Context, req *connect.Request[v1.UploadArchiveRequest]) (*connect.Response[v1.UploadArchiveResponse], error) {
	return c.uploadArchive.CallUnary(ctx, req)
}

// UploadServiceHandler is an implementation of the registry.module.v1.UploadService service.
type UploadServiceHandler interface {
	// Upload contents for the given Module.
	Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error)
	// Upload archive contents for the given Module.
	// This allows uploading compressed archive files that will be extracted server-side.
	UploadArchive(context.Context, *connect.Request[v1.UploadArchiveRequest]) (*connect.Response[v1.UploadArchiveResponse], error)
}

// NewUploadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUploadServiceHandler(svc UploadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	uploadServiceMethods := v1.File_registry_module_v1_upload_service_proto.Services().ByName("UploadService").Methods()
	uploadServiceUploadHandler := connect.NewUnaryHandler(
		UploadServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(uploadServiceMethods.ByName("Upload")),
		connect.WithHandlerOptions(opts...),
	)
	uploadServiceUploadArchiveHandler := connect.NewUnaryHandler(
		UploadServiceUploadArchiveProcedure,
		svc.UploadArchive,
		connect.WithSchema(uploadServiceMethods.ByName("UploadArchive")),
		connect.WithHandlerOptions(opts...),
	)
	return "/registry.module.v1.UploadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UploadServiceUploadProcedure:
			uploadServiceUploadHandler.ServeHTTP(w, r)
		case UploadServiceUploadArchiveProcedure:
			uploadServiceUploadArchiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUploadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUploadServiceHandler struct{}

func (UnimplementedUploadServiceHandler) Upload(context.Context, *connect.Request[v1.UploadRequest]) (*connect.Response[v1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.UploadService.Upload is not implemented"))
}

func (UnimplementedUploadServiceHandler) UploadArchive(context.Context, *connect.Request[v1.UploadArchiveRequest]) (*connect.Response[v1.UploadArchiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("registry.module.v1.UploadService.UploadArchive is not implemented"))
}
